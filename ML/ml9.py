# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q0Jmb7ZrFazvdHlpjUZ87y1GvMv4xJTk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split as tts
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, classification_report , accuracy_score

from sklearn import datasets

iris = datasets.load_iris()

df = pd.DataFrame(iris.data, columns=iris.feature_names)

df['target'] = iris.target
df

df = df.drop(columns=['target'])

sc = StandardScaler()

scaled_data = sc.fit_transform(df)

scaled_data

pca = PCA(n_components = 2 )
a=  pca.fit_transform(df)

import mpl_toolkits.mplot3d

fig = plt.figure(1, figsize=(8, 6))
ax = fig.add_subplot(111, projection="3d", elev=-150, azim=110)
ax.scatter(a[:,0] , a[:,1] , a[: , 2], c = iris.target)
ax.set_title("PCA analyssis fo Iris dataset ")
ax.set_xlabel("First Component")
ax.set_ylabel("Second Component")
ax.set_zlabel("Third Complonent")

X = df

y = iris.target



X_train, X_test, y_train, y_test = tts(X, y, test_size=0.2, random_state=42)

X_train_scaled = sc.fit_transform(X_train)
X_test_scaled = sc.transform(X_test)# y_train_scaled = sc.fit_transform(y_train)
# y_test_scaled = sc.transform(y_test)

svm = SVC(kernel="linear",  C=1)

sa = svm.fit(X_train_scaled, y_train)

y_pred = svm.predict(X_test_scaled)

y_pred

cm = confusion_matrix(y_test,y_pred)

cm

acc = accuracy_score(y_pred , y_test)

acc

print(classification_report(y_pred , y_test))

n_pcs= pca.components_.shape[0]

# get the index of the most important feature on EACH component
# LIST COMPREHENSION HERE
most_important = [np.abs(pca.components_[i]).argmax() for i in range(n_pcs)]

initial_feature_names = ['1','2','c','d']
# get the names
most_important_names = [initial_feature_names[most_important[i]] for i in range(n_pcs)]

# LIST COMPREHENSION HERE AGAIN
dic = {'PC{}'.format(i): most_important_names[i] for i in range(n_pcs)}

# build the dataframe
asdf = pd.DataFrame(dic.items())

print(asdf)

n_pcs= pca.components_.shape[0]

n_pcs

